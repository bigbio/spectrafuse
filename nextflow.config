
params{

  // MaraCluster parameters
  maracluster_pvalue_threshold = -5.0 // Set log(p-value) threshold for MaraCluster
  maracluster_verbose = false // Set to true to enable verbose output from MaraCluster
  maracluster_files_list_folder = null // Set to a folder containing a list of files to process with MaraCluster
  maracluster_output_folder = './' // Set to a folder to output the results of MaraCluster
  maracluster_precursor_tolerance = 20.0ppm // Set the precursor tolerance for MaraCluster

}

includeConfig 'conf/base.config'

profiles {
    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }

    ebislurm{
         conda.enable           = false
         docker.enabled         = false
         singularity.enabled    = true
         executor {
            name = "slurm"
            queueSize = 1000
            submitRateLimit = "10/1sec"
            exitReadTimeout = "30 min"
            jobName = {
                task.name // [] and " " not allowed in lsf job names
                .replace("[", "(")
                .replace("]", ")")
                .replace(" ", "_")
            }
         }
         singularity.autoMounts = false
         singularity.runOptions = '-B /hps/nobackup/juan/pride/reanalysis:/hps/nobackup/juan/pride/reanalysis'
         singularity.cacheDir = "/hps/nobackup/juan/pride/reanalysis/singularity/"
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}